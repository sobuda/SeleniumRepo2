import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.testng.Assert;
import org.testng.annotations.Test;

public class TestStreams {


	@Test
	public void Regular() {
		ArrayList<String> names = new ArrayList<String>();
		names.add("Sowmya");
		names.add("Aadya");
		names.add("Aarush");
		names.add("Anu");
		names.add("Sachin");
		names.add("Ashwini");
		names.add("Vishal");
		names.add("Anthony");
		names.add("Affle");
		names.add("Vedaa");
		names.add("Rochana");
		names.add("Avva");
		int count = 0;
		
		for(int i = 0; i<names.size();i++) {
			if(names.get(i).startsWith("A")) {
				count++;
			}
		}
		
		System.out.println("No.of Names starting with A: "+count);
				
	}
	
	@Test
	public void streamFilter() {
		ArrayList<String> names = new ArrayList<String>();
		names.add("Sowmya");
		names.add("Aadya");
		names.add("Aarush");
		names.add("Anu");
		names.add("Sachin");
		names.add("Ashwini");
		names.add("Vishal");
		names.add("Anthony");
		names.add("Affle");
		names.add("Vedaa");
		names.add("Rochana");
		names.add("Avva");
		
		// Lambda operator with streams(->)
		long count = names.stream().filter(s->s.startsWith("A")).count();
		System.out.println(count);
		
		//prints all the names which are greater than 4 in length
		names.stream().filter(s->s.length()>4).forEach(s->System.out.println(s));
		System.out.println("***********");
		//Prints only 3 names which have length greater than 4
		names.stream().filter(s->s.length()>4).limit(3).forEach(s->System.out.println(s));
		System.out.println("***********");
	}
	
	@Test
	public void streamMap() {
		
		Stream.of("Sowmya","Aadya","Aarush","Anu","Sachin","Ashwini","Vishal","Anthony","Affle","Vedaa","Rochana","Avva")
		.filter(s->s.endsWith("a")).map(s->s.toUpperCase()).forEach(s->System.out.println(s));
		
		System.out.println("***********");
		
		Stream.of("Sowmya","Aadya","Aarush","Anu","Sachin","Ashwini","Vishal","Anthony","Affle","Vedaa","Rochana","Avva")
		.filter(s->s.startsWith("A")).map(s->s.toUpperCase()).sorted().forEach(s->System.out.println(s));
	}
	
	@Test
	public void streamList() {
		ArrayList<String> als = new ArrayList<String>();
		als.add("King");
		als.add("Queen");
		als.add("Minister");
		
		//Immutable List Syntax
		List<String> ls = Arrays.asList("Sowmya","Aadya","Aarush","Anu","Sachin","Ashwini","Vishal","Anthony","Affle","Vedaa","Rochana","Avva");
		
		Stream<String> newStream = Stream.concat(als.stream(), ls.stream());
		
		Assert.assertTrue(newStream.anyMatch(s->s.equalsIgnoreCase("aadya")));
	}
	
	@Test
	public void streamToListCollector() {
		
		List<String> newList = Stream.of("Sowmya","Aadya","Aarush","Anu","Sachin","Ashwini","Vishal","Anthony","Affle","Vedaa","Rochana","Avva")
		.filter(s->s.startsWith("S")).map(s->s.toUpperCase())
		.collect(Collectors.toList());
		
		System.out.println(newList.get(0));
		
		List<Integer> intList = Arrays.asList(3,3,5,6,7,5,8,9,2,6,4,8);
		
		intList.stream().distinct().forEach(s->System.out.println(s));
		
		List<Integer> uniqueList = intList.stream().distinct().sorted().collect(Collectors.toList());
		
		System.out.println("5th Unique Num: " + uniqueList);
		
		
	}
}
